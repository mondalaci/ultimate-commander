// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic.SteticGenerated {
    
    
    internal class UltimateCommanderSlot {
        
        public static void Build(Gtk.Bin cobj) {
            System.Collections.Hashtable bindings = new System.Collections.Hashtable();
            // Widget UltimateCommander.Slot
            Stetic.BinContainer.Attach(cobj);
            cobj.Name = "UltimateCommander.Slot";
            // Container child UltimateCommander.Slot.Gtk.Container+ContainerChild
            Gtk.EventBox w1 = new Gtk.EventBox();
            bindings["topwidget"] = w1;
            w1.Name = "topwidget";
            // Container child topwidget.Gtk.Container+ContainerChild
            Gtk.Alignment w2 = new Gtk.Alignment(0.5F, 0.5F, 1F, 1F);
            bindings["alignment2"] = w2;
            w2.Name = "alignment2";
            w2.LeftPadding = ((uint)(3));
            w2.RightPadding = ((uint)(3));
            w2.BottomPadding = ((uint)(3));
            // Container child alignment2.Gtk.Container+ContainerChild
            Gtk.VBox w3 = new Gtk.VBox();
            bindings["vbox2"] = w3;
            w3.Name = "vbox2";
            // Container child vbox2.Gtk.Box+BoxChild
            Gtk.Label w4 = new Gtk.Label();
            bindings["label4"] = w4;
            w4.HeightRequest = 3;
            w4.Name = "label4";
            w4.LabelProp = "";
            w3.Add(w4);
            Gtk.Box.BoxChild w5 = ((Gtk.Box.BoxChild)(w3[w4]));
            w5.Position = 0;
            w5.Expand = false;
            w5.Fill = false;
            // Container child vbox2.Gtk.Box+BoxChild
            Gtk.Alignment w6 = new Gtk.Alignment(0.5F, 0.5F, 1F, 1F);
            bindings["alignment1"] = w6;
            w6.Name = "alignment1";
            w6.LeftPadding = ((uint)(1));
            w6.TopPadding = ((uint)(1));
            w6.BottomPadding = ((uint)(2));
            // Container child alignment1.Gtk.Container+ContainerChild
            Gtk.TextView w7 = new Gtk.TextView();
            bindings["header"] = w7;
            w7.CanFocus = true;
            w7.Name = "header";
            w7.Editable = false;
            w7.CursorVisible = false;
            w6.Add(w7);
            w3.Add(w6);
            Gtk.Box.BoxChild w9 = ((Gtk.Box.BoxChild)(w3[w6]));
            w9.Position = 1;
            w9.Expand = false;
            // Container child vbox2.Gtk.Box+BoxChild
            Gtk.EventBox w10 = new Gtk.EventBox();
            bindings["view_slot"] = w10;
            w10.Name = "view_slot";
            w3.Add(w10);
            Gtk.Box.BoxChild w11 = ((Gtk.Box.BoxChild)(w3[w10]));
            w11.Position = 2;
            w2.Add(w3);
            w1.Add(w2);
            cobj.Add(w1);
            if ((cobj.Child != null)) {
                cobj.Child.ShowAll();
            }
            cobj.Show();
            w1.ButtonPressEvent += ((Gtk.ButtonPressEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.ButtonPressEventHandler), cobj, "OnButtonPressEvent")));
            w7.ButtonPressEvent += ((Gtk.ButtonPressEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.ButtonPressEventHandler), cobj, "OnButtonPressEvent")));
            System.Reflection.FieldInfo[] fields = cobj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = bindings[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(cobj, widget);
                }
            }
        }
    }
}
